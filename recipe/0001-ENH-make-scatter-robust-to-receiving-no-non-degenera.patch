From edb4904d55b14e4549a0e34ce800fc9d15deda16 Mon Sep 17 00:00:00 2001
From: Yaroslav Halchenko <debian@onerussian.com>
Date: Tue, 30 Jan 2018 11:13:53 -0500
Subject: [PATCH 1/2] ENH: make scatter robust to receiving no non-degenerate
 data

---
 mvpa2/misc/plot/scatter.py       | 42 +++++++++++++++++++++++-----------------
 mvpa2/tests/test_misc_scatter.py |  5 +++++
 2 files changed, 29 insertions(+), 18 deletions(-)

diff --git a/mvpa2/misc/plot/scatter.py b/mvpa2/misc/plot/scatter.py
index ddb84f58..09b650bc 100755
--- a/mvpa2/misc/plot/scatter.py
+++ b/mvpa2/misc/plot/scatter.py
@@ -16,7 +16,7 @@ import pylab as pl
 import nibabel as nb
 import numpy as np
 
-from mvpa2.base import verbose
+from mvpa2.base import verbose, warning
 
 __all__ = ['plot_scatter']
 
@@ -286,21 +286,22 @@ def plot_scatter(dataXd, mask=None, masked_opacity=0.,
 
         # for orientation we need to plot 1 slice... assume that the last dimension is z -- figure out a slice with max # of non-zeros
         zdim_entries = ndindices_nz[:, -1]
-        zdim_counts, _ = np.histogram(zdim_entries, bins=np.arange(0, np.max(zdim_entries)+1))
-        zdim_max = np.argmax(zdim_counts)
-
-        if hint_opacity:
-            # now we need to plot that zdim_max slice taking into account our colormap
-            # create new axes
-            axslice = pl.axes([left, bottom+height * 0.72, width/4., height/5.],
-                              axisbg='y')
-            axslice.axis('off')
-            sslice = np.zeros(dataXd.shape[1:3]) # XXX hardcoded assumption on dimcolor =1
-            sslice[:, : ] = np.arange(dimcolor_len)[None, :]
-            # if there is time dimension -- choose minimal value across all values
-            dataXd_mint = np.min(dataXd, axis=-1) if dataXd.ndim == 5 else dataXd
-            sslice[dataXd_mint[0, ..., zdim_max] == 0] = -1 # reset those not in the picture to be "under" range
-            axslice.imshow(sslice, alpha=hint_opacity, cmap=cm)
+        if np.size(zdim_entries):
+            zdim_counts, _ = np.histogram(zdim_entries, bins=np.arange(0, np.max(zdim_entries)+1))
+            zdim_max = np.argmax(zdim_counts)
+
+            if hint_opacity:
+                # now we need to plot that zdim_max slice taking into account our colormap
+                # create new axes
+                axslice = pl.axes([left, bottom+height * 0.72, width/4., height/5.],
+                                  axisbg='y')
+                axslice.axis('off')
+                sslice = np.zeros(dataXd.shape[1:3]) # XXX hardcoded assumption on dimcolor =1
+                sslice[:, : ] = np.arange(dimcolor_len)[None, :]
+                # if there is time dimension -- choose minimal value across all values
+                dataXd_mint = np.min(dataXd, axis=-1) if dataXd.ndim == 5 else dataXd
+                sslice[dataXd_mint[0, ..., zdim_max] == 0] = -1 # reset those not in the picture to be "under" range
+                axslice.imshow(sslice, alpha=hint_opacity, cmap=cm)
     else:
         # the scatter plot without colors to distinguish location
         ax_scatter.scatter(x, y, **sc_kwargs)
@@ -322,8 +323,13 @@ def plot_scatter(dataXd, mask=None, masked_opacity=0.,
 
 
     # Axes
-    ax_scatter.plot((np.min(x), np.max(x)), (0, 0), 'r', alpha=0.5)
-    ax_scatter.plot((0,0), (np.min(y), np.max(y)), 'r', alpha=0.5)
+    if np.size(x):
+        ax_scatter.plot((np.min(x), np.max(x)), (0, 0), 'r', alpha=0.5)
+    else:
+        warning("There is nothing to plot, returning early")
+        return pl.gcf()
+
+    ax_scatter.plot((0, 0), (np.min(y), np.max(y)), 'r', alpha=0.5)
 
     if (mask is not None and not masked_opacity and np.sum(mask)):
         # if there is a non-degenerate mask which was not intended to be plotted,
diff --git a/mvpa2/tests/test_misc_scatter.py b/mvpa2/tests/test_misc_scatter.py
index 052268ec..eda4294d 100644
--- a/mvpa2/tests/test_misc_scatter.py
+++ b/mvpa2/tests/test_misc_scatter.py
@@ -56,6 +56,11 @@ def test_plot_scatter():
     fig = plot_scatter(data2d, mask=mask)
     fig = plot_scatter(data2d, mask=mask, masked_opacity=0.42)
 
+    data2d_nan = np.empty(data2d.shape)
+    data2d_nan[:, :] = np.nan
+    # must not blow
+    fig = plot_scatter(data2d_nan, mask=mask)
+
     # smoke test with threshold
     fig = plot_scatter(data2d, thresholds=[0.2])
     fig = plot_scatter(data2d, thresholds=[0.2, 0.4])
-- 
2.15.1

